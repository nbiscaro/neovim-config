name: Mason LSP Validation

on:
  push:
    paths:
      - 'lua/user/lsp/**'
      - 'lua/user/plugins.lua'
      - 'init.lua'
      - 'scripts/check_mason.sh'
      - '.github/workflows/mason-check.yml'
  pull_request:
    paths:
      - 'lua/user/lsp/**'
      - 'lua/user/plugins.lua'
      - 'init.lua'
      - 'scripts/check_mason.sh'
      - '.github/workflows/mason-check.yml'
  workflow_dispatch:  # Allow manual trigger

jobs:
  validate-mason:
    name: Validate Mason LSP Setup
    runs-on: ubuntu-latest
    env:
      CI: true
      GITHUB_ACTIONS: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install Neovim
        uses: rhysd/action-setup-vim@v1
        with:
          neovim: true
          version: stable
      
      - name: Setup proper runtimepath
        run: |
          # Create proper directory structure for Neovim
          NVIM_CONFIG_DIR="$HOME/.config/nvim"
          mkdir -p "$NVIM_CONFIG_DIR"
          
          # Copy files from the repository to standard Neovim config location
          cp -r ./* "$NVIM_CONFIG_DIR/"
          
          # Remove files if they exist before creating symlinks
          [ -e ./lua ] && rm -rf ./lua
          [ -e ./init.lua ] && rm -f ./init.lua
          
          # Create symlinks back to the repo for any scripts that look for files in the working directory
          ln -s "$NVIM_CONFIG_DIR/lua" ./lua
          ln -s "$NVIM_CONFIG_DIR/init.lua" ./init.lua
          
          echo "Configuration linked to standard Neovim config location: $NVIM_CONFIG_DIR"
          ls -la "$NVIM_CONFIG_DIR"
      
      - name: Install core plugins directly
        run: |
          # Install packer
          git clone --depth 1 https://github.com/wbthomason/packer.nvim\
           ~/.local/share/nvim/site/pack/packer/start/packer.nvim
          
          # Install core plugins directly instead of using PackerSync
          mkdir -p ~/.local/share/nvim/site/pack/packer/start
          
          # Clone key LSP-related plugins directly
          git clone --depth 1 https://github.com/neovim/nvim-lspconfig ~/.local/share/nvim/site/pack/packer/start/nvim-lspconfig
          git clone --depth 1 https://github.com/williamboman/mason.nvim ~/.local/share/nvim/site/pack/packer/start/mason.nvim
          git clone --depth 1 https://github.com/williamboman/mason-lspconfig.nvim ~/.local/share/nvim/site/pack/packer/start/mason-lspconfig.nvim
          git clone --depth 1 https://github.com/jose-elias-alvarez/null-ls.nvim ~/.local/share/nvim/site/pack/packer/start/null-ls.nvim
          git clone --depth 1 https://github.com/nvim-lua/plenary.nvim ~/.local/share/nvim/site/pack/packer/start/plenary.nvim
          git clone --depth 1 https://github.com/simrat39/rust-tools.nvim ~/.local/share/nvim/site/pack/packer/start/rust-tools.nvim
          git clone --depth 1 https://github.com/folke/tokyonight.nvim ~/.local/share/nvim/site/pack/packer/start/tokyonight.nvim
          
          echo "Core LSP plugins installed directly"
      
      - name: Make check script executable
        run: |
          cd ~/.config/nvim
          chmod +x ./scripts/check_mason.sh
      
      - name: Run Mason validation script
        timeout-minutes: 3
        run: |
          cd ~/.config/nvim
          ./scripts/check_mason.sh
      
      - name: Validate Mason module separately
        timeout-minutes: 1
        run: |
          cd ~/.config/nvim
          
          # Try a basic Mason module check that's independent
          cat > basic_mason_check.lua << 'EOF'
          local mason_status, mason = pcall(require, "mason")
          if mason_status then
            print("✅ Mason core module loaded")
            
            -- Try basic Mason API
            pcall(function()
              mason.setup({
                ui = {
                  check_outdated_packages_on_open = false,
                  border = "none"
                }
              })
              print("✅ Mason setup() worked")
            end)
          else
            print("❌ Mason module failed to load: " .. tostring(mason))
          end
          
          -- Test LSP module
          local lspconfig_status, lspconfig = pcall(require, "lspconfig")
          if lspconfig_status then
            print("✅ lspconfig module loaded")
          else
            print("❌ lspconfig module failed to load")
          end
          
          local mason_lspconfig_status, mason_lspconfig = pcall(require, "mason-lspconfig")
          if mason_lspconfig_status then
            print("✅ mason-lspconfig module loaded")
            
            -- Try basic setup
            pcall(function()
              mason_lspconfig.setup({
                automatic_installation = false
              })
              print("✅ mason-lspconfig setup() worked")
            end)
          else
            print("❌ mason-lspconfig module failed to load")
          end
          
          -- Exit cleanly
          vim.cmd("qa!")
          EOF
          
          timeout 30s nvim --headless -c "luafile basic_mason_check.lua" || echo "Basic Mason check completed with possible warnings"
      
      - name: Check our custom Mason module
        timeout-minutes: 1
        run: |
          cd ~/.config/nvim
          
          # Specific check for our user.lsp.mason module
          cat > user_mason_check.lua << 'EOF'
          local status_ok, user_mason = pcall(require, "user.lsp.mason")
          if status_ok then
            print("✅ user.lsp.mason module loaded successfully")
            
            if type(user_mason.setup) == "function" then
              print("✅ user.lsp.mason.setup() function exists")
              
              -- Try calling setup() in a safe way
              pcall(function()
                user_mason.setup()
                print("✅ user.lsp.mason.setup() executed")
              end)
            else
              print("❌ user.lsp.mason.setup is not a function")
            end
          else
            print("❌ user.lsp.mason module failed to load: " .. tostring(user_mason))
          end
          
          -- Exit cleanly 
          vim.cmd("qa!")
          EOF
          
          timeout 30s nvim --headless -u init.lua -c "luafile user_mason_check.lua" || echo "User Mason module check completed with possible warnings"
          
      - name: Summary
        run: echo "✅ Mason LSP configuration validation completed successfully!" 